<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Io" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>

<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
// <copyright file="SchemaGen.tt" company="Mark Stacey">
//  Copyright Â© . All Rights Reserved.
// </copyright>
var server = new Server(".\\SQL2017");
    var database = new Database(server, "FitBI");
    database.Refresh();

#>
<#
	string basePath = "C:\\Git\\FitBI\\Orca-UI\\src\\store\\modules\\";
	string jsGenPath = "C:\\Git\\FitBI\\FitAPI.Functions\\FitAPIFunctions\\jsGen\\store\\";
	Schema[] sorted = (from Schema s in database.Schemas where s.Name == "Core" || s.Name == "Exercise" || s.Name == "Program" || s.Name == "Stats" orderby s.Name select s).ToArray();
            foreach (Schema sSchema in sorted)
            {
                string fileName = sSchema.Name ;

				if (!Directory.Exists(basePath + fileName )){
					Directory.CreateDirectory(basePath + fileName );
				}
				if (!File.Exists(basePath + fileName + @"\\" + fileName + "Actions.js")){
					File.Create(basePath + fileName + @"\\" + fileName + "Actions.js");
				}

                var lt = new ValuesTemplate(database, sSchema, fileName);
				lt.RenderToFile(fileName + @"\\" + fileName + "Store.js");
								
				
				
            }
			foreach (Schema sSchema in sorted)
            {
			string fileName = sSchema.Name ;
			File.Copy( jsGenPath + fileName + @"\\" + fileName + "Store.js",
						 basePath + fileName + @"\\" + fileName + "Store.js",
						 true);
            }

#>
<#+
private class ValuesTemplate : Template
{
    public ValuesTemplate(Database db, Schema sSchema, string className)
    {
     string strFile = @"import Vue from 'vue'
import Vuex from 'vuex'
import {_} from 'vue-underscore'
// Import the `getField` getter and the `updateField`
// mutation function from the `vuex-map-fields` module.
import { getField, updateField } from 'vuex-map-fields'
// import { getField, updateField } from 'vuex-map-fields'
import actions from './" + className + @"Actions'

Vue.use(Vuex)
Vue.use(_)

const state = {";
            Table[] tTables = (from Table tTable in db.Tables where tTable.Schema == sSchema.Name select tTable).ToArray();
            foreach (Table tTable in tTables)
            {
                strFile += @"
  " + tTable.Name + @": { },
  " + tTable.Name + @"List: [],
  " + tTable.Name + @"Item: {},";
            }
            strFile = strFile.Substring(0, strFile.Length - 1); //Remove trailing space

            strFile += @"
}
// #region Getters
const getters = {
  getField,";
            foreach (Table tTable in tTables)
            {
                strFile += @"
  Get_" + tTable.Name + @"_ByRouteID: function (state, getters, rootState) {
    return state." + tTable.Name + @"[+rootState.route.params." + tTable.Name.ToLower() + @"id]
  },
  Get_" + tTable.Name + @"_By" + tTable.Name + @"ID: function (state) {
    return function (" + tTable.Name.ToLower().Replace("_","") + @"ID) {
      return state." + tTable.Name + @"[" + tTable.Name.ToLower().Replace("_","") + @"ID]
    }
  },
  Get_" + tTable.Name + @"Item: function () {
    return state." + tTable.Name + @"Item
  },
  Get_" + tTable.Name + @"_All: function () {
    return state." + tTable.Name + @"
  },
  Get_" + tTable.Name + @"_Select: function () {
    return _.chain(state." + tTable.Name + @")
      .map(item => {
        return {
          label: item.Name,
          value: item." + tTable.Name + @"ID
        }
      })
      .sortBy('Name')
      .value()
  },
  Get_" + tTable.Name + @"_SelectObject: function () {
    return _.mapObject(
      _.indexBy(state." + tTable.Name + @", '" + tTable.Name + @"ID'),
      item => ({
        label: item.Name,
        value: item." + tTable.Name + @"ID
      })
    )
  },
  Get_" + tTable.Name + @"_List: function () {
    return _.sortBy(state." + tTable.Name + @", 'Name')
  },
  Get_" + tTable.Name + @"_Item: function () {
    return state." + tTable.Name + @"Item
  },";
Column[] cColDates = (from Column cCol in tTable.Columns where cCol.DataType.SqlDataType == SqlDataType.DateTime select cCol).ToArray();
                foreach (Column col in cColDates)
                {
                    strFile += @"
  Get_" + tTable.Name + @"_ByLatest_" + col.Name + @": function () {
    if (state." + tTable.Name + @"List.length === 0) return {}
    return _.chain(state." + tTable.Name + @")
      .sortBy(function (item) { return item." + col.Name + @" })
      .first()
      .value()
  },";
                }

            }
			strFile = strFile.Substring(0, strFile.Length - 1);
            
            strFile += @"
}
// #endregion
// #region Mutations
const mutations = {
  updateField";
  string strColumnList = "";
            foreach (Table tTable in tTables)
            {
strColumnList = "";
Column[] cCols = (from Column cCol in tTable.Columns  select cCol).ToArray();
                foreach (Column col in cCols)
                {
                    strColumnList += @"
        " + col.Name + @": null,";
				}
			if (strColumnList.Length > 0) {
				strColumnList = strColumnList.Substring(0, strColumnList.Length - 1);
			}
	strColumnList += @"
      ";

                strFile += @",
  GET_" + tTable.Name.ToUpper() + @" (state, payload) {
    if ('' + payload." + tTable.Name + @"ID === '0') {
      state." + tTable.Name + @"Item = {" + strColumnList + @"}
    } else {
      state." + tTable.Name + @"Item = state." + tTable.Name + @"[payload." + tTable.Name + @"ID]
    }
  },
  SET_" + tTable.Name.ToUpper() + @" (state, payload) {
    state." + tTable.Name + @"[payload." + tTable.Name + @"ID] = payload
  },
  SET_" + tTable.Name.ToUpper() + @"ITEM (state, payload) {
    state." + tTable.Name + @"Item = payload
  },
  SET_" + tTable.Name.ToUpper() + @"_LIST: function (state, fullList) {
    if (typeof (fullList) !== 'undefined') {
      fullList.forEach(function (element) {
        Vue.set(state." + tTable.Name + @", element." + tTable.Name + @"ID, element)
        state." + tTable.Name + @"List.push(element." + tTable.Name + @"ID)
      }, this)
    }
  }";
            }

            strFile += @"
}
// #endregion

const store = {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
}

export default store
";

            this.FileName = strFile;

	}
    private string FileName {get; set;}
    public override string TransformText()
    {
        #><#=this.FileName#><#+
        return this.GenerationEnvironment.ToString();
    }
}#>