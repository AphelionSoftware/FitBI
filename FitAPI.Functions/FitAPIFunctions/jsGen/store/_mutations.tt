<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ output extension=".js" #>
<#@ parameter name="SchemaName" type="System.String" #>
<#
// <copyright file="SchemaGen.tt" company="Mark Stacey">
//  Copyright © . All Rights Reserved.
// </copyright>
var server = new Server(".\\SQL2017");
    var database = new Database(server, "FitBI");
    database.Refresh();
#>import {updateField} from 'vuex-map-fields'
import Vue from 'vue'
import localForage from 'localforage'
const mutations = {
<#
	Table[] tTables = (from Table tTable in database.Tables where tTable.Schema == SchemaName select tTable).ToArray();
            foreach (Table tTable in tTables)
            {
#>
  GET_<#= tTable.Name.ToUpper() #> (state, payload) {
    if ('' + payload.<#= tTable.Name #>ID === '0') {
      state.<#= tTable.Name #>Item = {
<#
	    Column[] cCols = (from Column cCol in tTable.Columns  select cCol).ToArray();
		foreach (Column col in cCols)
			{#>
        <#= col.Name #>: null,
<# 
		    }
		#>
        NeedsSync: true
      }
    } else {
      state.<#= tTable.Name #>Item = state.<#= tTable.Name #>[payload.<#= tTable.Name #>ID]
    }
  },
  SET_<#= tTable.Name.ToUpper() #> (state, payload) {
    if (typeof payload !== 'undefined') {
      Vue.set(state.<#= tTable.Name #>, payload.<#= tTable.Name #>ID, payload)
      localForage.setItem('<#= SchemaName #>_<#= tTable.Name #>', payload)
    }
  },
  SET_<#= tTable.Name.ToUpper() #>ITEM (state, payload) {
    state.<#= tTable.Name #>Item = payload
  },
  SET_<#= tTable.Name.ToUpper() #>_LIST: function (state, fullList) {
    if (typeof (fullList) !== 'undefined') {
      fullList.forEach(function (element) {
        Vue.set(state.<#= tTable.Name #>, element.<#= tTable.Name == "DailyMeasurement" ? "MeasurementDate" : tTable.Name #>ID, element)
        state.<#= tTable.Name #>List.push(element.<#= tTable.Name == "DailyMeasurement" ? "MeasurementDate" : tTable.Name #>ID)
      }, this)
      localForage.setItem('<#= SchemaName #>_<#= tTable.Name #>', fullList)
    }
  },
<# 
}
#>
  SET_FLAG (state, payload) {
    if (payload === false) {
      state.Flags.loaded = false
    } else if (payload === true) {
      state.Flags.loaded = true
    } else {
      state.Flags = {...state.Flags, ...payload}
    }
  },
  updateField
}

export default mutations
